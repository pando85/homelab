- name: Check requirements
  assert:
    that:
      - ansible_path is defined
      - k3s_kubelet_extra_args | type_debug == "list"

- name: Check if k3s binary exists
  stat:
    path: "/usr/local/bin/k3s"
  register: k3s_binary_stat

# upgrades are handled by the system-upgrade service
- name: Install k3s
  when: not k3s_binary_stat.stat.exists
  block:
    - name: Download k3s binary
      get_url:
        url: https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/{{ k3s_binary }}
        checksum: sha256:https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/sha256sum-{{
          k3s_arch }}.txt
        dest: "/usr/local/bin/k3s-{{ k3s_version }}"
        owner: root
        group: root
        mode: "0755"
      check_mode: false

    - name: Copy k3s binary
      # system-upgrade needs the binary in the path, a link is not valid
      copy:
        src: "/usr/local/bin/k3s-{{ k3s_version }}"
        remote_src: true
        dest: "/usr/local/bin/k3s"
        owner: root
        group: root
        mode: "0755"
      notify: Restart k3s

- name: Ensure config directories exist
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - /etc/rancher/k3s
    - /etc/rancher/node

- name: Check if k3s token file exists on the first node
  run_once: true
  stat:
    path: "{{ k3s_token_file }}"
  register: k3s_token_file_stat

- name: Generate k3s token file on the first node if not exist yet
  run_once: true
  when: not k3s_token_file_stat.stat.exists
  copy:
    content: "{{ lookup('community.general.random_string', length=32) }}"
    dest: "{{ k3s_token_file }}"
    mode: "0600"

- name: Get k3s token from the first node
  run_once: true
  slurp:
    src: "{{ k3s_token_file }}"
  delegate_to: "{{ groups['kube_control_plane'][0] }}"
  register: k3s_token_base64

- name: Ensure all nodes has the same token
  copy:
    content: "{{ k3s_token_base64.content | b64decode }}"
    dest: "{{ k3s_token_file }}"
    mode: "0600"

- name: Copy k3s config files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  loop:
    - src: config.yaml.j2
      dest: "{{ k3s_config_file }}"
    - src: k3s.service.j2
      dest: "{{ k3s_service_file }}"
  notify: Restart k3s

- name: Enable k3s service
  systemd:
    name: k3s
    enabled: true
    daemon_reload: true
    state: started
  register: k3s_service
  until: k3s_service is succeeded
  retries: 5

- name: Get Kubernetes config file
  run_once: true
  slurp:
    src: /etc/rancher/k3s/k3s.yaml
  delegate_to: "{{ groups['kube_control_plane'][0] }}"
  register: kubeconfig_base64
  tags:
    - kubeconfig

- name: Write Kubernetes config file with the correct cluster address
  copy:
    content: "{{ kubeconfig_base64.content | b64decode | replace('127.0.0.1',
      hostvars[groups['kube_control_plane'][0]].ansible_hostname) }}"
    dest: "{{ ansible_path }}/kubeconfig.yaml"
    mode: "0600"
  delegate_to: localhost
  become: false
  run_once: true
  tags:
    - kubeconfig

# https://github.com/cilium/cilium/issues/23838
- name: Ensure dir is owned by root
  file:
    path: /opt/cni/bin
    state: directory
    mode: "0755"
    owner: root
    group: root
  tags:
    - workaround-cilium
