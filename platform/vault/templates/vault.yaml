apiVersion: "vault.banzaicloud.com/v1alpha1"
kind: "Vault"
metadata:
  name: "vault"
  labels:
    backup/retain: quaterly
spec:
  size: 1
  # renovate: datasource=docker
  image: hashicorp/vault:1.19.3
  # specify a custom bank-vaults image with bankVaultsImage:
  # bankVaultsImage: ghcr.io/banzaicloud/bank-vaults:latest

  resources:
    vault:
      requests:
        memory: 500Mi
        cpu: 20m
      limits:
        memory: 2Gi
        cpu: 2

    bankVaults:
      requests:
        memory: 18Mi
        cpu: 10m
      limits:
        memory: 128Mi
        cpu: 500m

    prometheusExporter:
      requests:
        memory: 8Mi
        cpu: 10m
      limits:
        memory: 128Mi
        cpu: 500m

  # Common annotations for all created resources
  annotations:
    common/annotation: "true"

  # Vault Pods , Services and TLS Secret annotations
  vaultAnnotations:
    type/instance: "vault"

  # Vault Configurer Pods and Services annotations
  vaultConfigurerAnnotations:
    type/instance: "vaultconfigurer"

  # Vault Pods , Services and TLS Secret labels
  vaultLabels:
    example.com/log-format: "json"

  # Vault Configurer Pods and Services labels
  vaultConfigurerLabels:
    example.com/log-format: "string"

  # Support for affinity Rules, same as in PodSpec
  # affinity:
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #       nodeSelectorTerms:
  #       - matchExpressions:
  #         - key : "node-role.kubernetes.io/your_role"
  #           operator: In
  #           values: ["true"]

  # Support for pod nodeSelector rules to control which nodes can be chosen to run
  # the given pods
  # nodeSelector:
  #   "node-role.kubernetes.io/your_role": "true"

  # Support for node tolerations that work together with node taints to control
  # the pods that can like on a node
  # tolerations:
  # - effect: NoSchedule
  #   key: node-role.kubernetes.io/your_role
  #   operator: Equal
  #   value: "true"

  # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
  serviceAccount: vault

  # Specify the Service's type where the Vault Service is exposed
  # Please note that some Ingress controllers like https://github.com/kubernetes/ingress-gce
  # forces you to expose your Service on a NodePort
  serviceType: ClusterIP

  # Specify existing secret contains TLS certificate (accepted secret type: kubernetes.io/tls)
  # If it is set, generating certificate will be disabled
  # existingTlsSecretName: selfsigned-cert-tls

  # Specify threshold for renewing certificates. Valid time units are "ns", "us", "ms", "s", "m", "h".
  # tlsExpiryThreshold: 168h

  ingress:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod-dns
      external-dns.alpha.kubernetes.io/enabled: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    spec:
      ingressClassName: nginx-internal
      rules:
        - host: &host vault.internal.grigri.cloud
          http:
            paths:
              - backend:
                  service:
                    name: vault
                    port:
                      number: 8200
                path: /
                pathType: Prefix
      tls:
        - hosts:
            - *host
          secretName: vault-tls-certificate

  volumeMounts:
    - name: vault-file
      mountPath: /vault/file

  volumeClaimTemplates:
    - metadata:
        name: vault-file
        labels:
          backup/retain: quaterly
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

  # Describe where you would like to store the Vault unseal keys and root token.
  unsealConfig:
    options:
      # The preFlightChecks flag enables unseal and root token storage tests
      # This is true by default
      preFlightChecks: true
      # The storeRootToken flag enables storing of root token in chosen storage
      # This is true by default
      storeRootToken: true
    kubernetes:
      secretNamespace: {{ .Release.Namespace }}

  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
  config:
    storage:
      file:
        path: "${ .Env.VAULT_STORAGE_FILE }" # An example how Vault config environment interpolation can be used
    listener:
      tcp:
        address: "0.0.0.0:8200"
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
    ui: true

  vaultEnvsConfig:
    - name: VAULT_LOG_LEVEL
      value: info
    - name: VAULT_STORAGE_FILE
      value: "/vault/file"

  # If you are using a custom certificate and are setting the hostname in a custom way
  # sidecarEnvsConfig:
  #   - name: VAULT_ADDR
  #     value: https://vault.local:8200

  # # https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  # vaultPodSpec:
  #   hostAliases:
  #   - ip: "127.0.0.1"
  #     hostnames:
  #     - "vault.local"

  # It is possible to override the Vault container directly:
  # vaultContainerSpec:
  #   lifecycle:
  #     postStart:
  #       exec:
  #         command:
  #              - setcap cap_ipc_lock=+ep /vault/plugins/orchestrate

  # Marks presence of Istio, which influences things like port namings
  istioEnabled: false

  envsConfig:
    - name: OIDC_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: vault-secrets
          key: OIDC_CLIENT_SECRET

  externalConfig:
    auth:
      - type: oidc
        path: oidc
        options:
          listing_visibility: "unauth"
        config:
          oidc_discovery_url: https://idm.grigri.cloud/oauth2/openid/vault
          oidc_client_id: vault
          oidc_client_secret: "${env `OIDC_CLIENT_SECRET`}"
          default_role: admin
          jwt_supported_algs:
            - ES256
        roles:
          - name: default
            allowed_redirect_uris:
              - https://vault.internal.grigri.cloud/ui/vault/auth/oidc/oidc/callback"
              - http://localhost:8250/oidc/callback
            user_claim: email
            # oidc_scopes: groups
            # groups_claim: groups
            policies: admin
            ttl: 1h
      - type: kubernetes
        config:
            # uses vault Service Account
            kubernetes_host: https://kubernetes.default.svc.cluster.local
        roles:
          - name: allow-secrets
            bound_service_account_names:
              - external-secrets
            bound_service_account_namespaces:
              - external-secrets
            policies:
              - allow_secrets
            ttl: 1h
          - name: allow-iot-pki
            bound_service_account_names:
              - cert-manager
            bound_service_account_namespaces:
              - cert-manager
            policies:
              - allow_iot_pki
            ttl: 1h

    secrets:
      - path: secret
        type: kv
        description: General secrets.
        options:
          version: 2
      # https://learn.hashicorp.com/tutorials/vault/pki-engine
      - type: pki
        path: pki/grigri
        description: Grigri root CA
        config:
          default_lease_ttl: "9528h"  # 397 days -> max certificate validity
          max_lease_ttl: "87600h"  # 10 years
        configuration:
          config:
            - name: urls
              issuing_certificates:
                - https://vault.internal.grigri.cloud/v1/pki/grigri/ca
              crl_distribution_points:
                - https://vault.internal.grigri.cloud/v1/pki/grigri/crl
          roles:
            - name: internal-certificates-grigri
              allow_localhost: false
              ttl: "9528h"
              max_ttl: "9528h"
              allow_glob_domains: true
              allowed_domains:
                - "*.grigri"
              allow_subdomains: true
              server_flag: true
              client_flag: false
              key_type: "rsa"
              key_bits: 4096
              signature_bits: 256
              organization: "grigri"
              country: "ES"
              locality: "Madrid"
              province: "Madrid"
              allowed_domains_template: false
              issuer_ref: "default"
      - type: pki
        path: pki/iot
        description: Grigri IoT root CA
        config:
          default_lease_ttl: "9528h"  # 397 days -> max certificate validity
          max_lease_ttl: "87600h"  # 10 years
        configuration:
          config:
            - name: urls
              issuing_certificates:
                - https://vault.internal.grigri.cloud/v1/pki/iot/ca
              crl_distribution_points:
                - https://vault.internal.grigri.cloud/v1/pki/iot/crl
          root/generate:
            - name: internal
              common_name: iot.grigri
              ttl: "87600h"
              allow_subdomains: true
              allow_wildcard_certificates: true
              allowed_domains:
                - "iot.grigri"
                - "internal.grigri.cloud"
              key_type: "rsa"
              key_bits: 4096
              organization: "grigri"
              country: "ES"
              locality: "Madrid"
              province: "Madrid"
          roles:
            - name: internal-certificates-grigri-iot
              allow_localhost: false
              ttl: "9528h"
              max_ttl: "9528h"
              allow_glob_domains: true
              allowed_domains:
                - "*.iot.grigri"
                - "*.internal.grigri.cloud"
              allow_subdomains: true
              server_flag: true
              client_flag: false
              key_type: "rsa"
              key_bits: 4096
              signature_bits: 256
              organization: "grigri"
              country: "ES"
              locality: "Madrid"
              province: "Madrid"
              allowed_domains_template: false
              issuer_ref: "default"
    policies:
      - name: allow_secrets
        rules: |-
          path "secret/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
      - name: allow_iot_pki
        rules: |-
          path "pki/iot/*" {
            capabilities = ["create", "read", "update", "delete", "list"]
          }
      - name: admin
        rules: |-
          # Read system health check
          path "sys/health"
          {
            capabilities = ["read", "sudo"]
          }

          # Create and manage ACL policies broadly across Vault

          # List existing policies
          path "sys/policies/acl"
          {
            capabilities = ["list"]
          }

          # Create and manage ACL policies
          path "sys/policies/acl/*"
          {
            capabilities = ["create", "read", "update", "delete", "list", "sudo"]
          }

          # Enable and manage authentication methods broadly across Vault

          # Manage auth methods broadly across Vault
          path "auth/*"
          {
            capabilities = ["create", "read", "update", "delete", "list", "sudo"]
          }

          # Create, update, and delete auth methods
          path "sys/auth/*"
          {
            capabilities = ["create", "update", "delete", "sudo"]
          }

          # List auth methods
          path "sys/auth"
          {
            capabilities = ["read"]
          }

          # Enable and manage the key/value secrets engine at `secret/` path

          # List, create, update, and delete key/value secrets
          path "secret/*"
          {
            capabilities = ["create", "read", "update", "delete", "list", "sudo"]
          }

          # List, create, update, and delete key/value secrets
          path "pki/*"
          {
            capabilities = ["create", "read", "update", "delete", "list", "sudo"]
          }

          # Manage secrets engines
          path "sys/mounts/*"
          {
            capabilities = ["create", "read", "update", "delete", "list", "sudo"]
          }

          # List existing secrets engines.
          path "sys/mounts"
          {
            capabilities = ["read"]
          }
