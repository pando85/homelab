minio:
  mode: standalone

  drivesPerNode: 1
  # Number of MinIO containers running
  replicas: 1

  existingSecret: minio-users

  persistence:
    enabled: true
    existingClaim: minio-backup

  ingress:
    enabled: true
    ingressClassName: nginx-internal
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod-dns
      external-dns.alpha.kubernetes.io/enabled: "true"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "86400"
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "86400"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "86400"
      # fix timeouts uploading big files disabling proxy buffering
      nginx.ingress.kubernetes.io/proxy-buffering: "off"
      nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
      nginx.ingress.kubernetes.io/proxy-body-size: 1000G
      # https://min.io/docs/minio/linux/integrations/setup-nginx-proxy-with-minio.html
      nginx.ingress.kubernetes.io/server-snippet: |
        ignore_invalid_headers off;
      nginx.ingress.kubernetes.io/configuration-snippet: |
        chunked_transfer_encoding off;
    hosts:
      - &host s3.internal.grigri.cloud
    tls:
      - hosts:
          - *host
        secretName: s3-tls-certificate

  consoleIngress:
    enabled: true
    ingressClassName: nginx-internal
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod-dns
      external-dns.alpha.kubernetes.io/enabled: "true"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        chunked_transfer_encoding off;
    hosts:
      - &hostMC mc-s3.internal.grigri.cloud
    tls:
      - hosts:
          - *hostMC
        secretName: mc-s3-tls-certificate

  resources:
    requests:
      memory: 2Gi

  users:
    - accessKey: velero
      existingSecret: minio-users
      existingSecretKey: veleroPassword
      policy: readwrite
    ## Username, password and policy to be assigned to the user
    ## Default policies are [readonly|readwrite|writeonly|consoleAdmin|diagnostics]
    ## Add new policies as explained here https://min.io/docs/minio/kubernetes/upstream/administration/identity-access-management.html#access-management
    ## NOTE: this will fail if LDAP is enabled in your MinIO deployment
    ## make sure to disable this if you are using LDAP.
    #- accessKey: console
    #  secretKey: console123
    #  policy: consoleAdmin
    # Or you can refer to specific secret
    #- accessKey: externalSecret
    #  existingSecret: my-secret
    #  existingSecretKey: password
    #  policy: readonly

  buckets:
    - name: velero
      # Policy to be set on the
      # bucket [none|download|upload|public]
      policy: none
      # Purge if bucket exists already
      purge: false
      versioning: false
      objectlocking: false
    #   # Name of the bucket
    # - name: bucket1
    #   # Policy to be set on the
    #   # bucket [none|download|upload|public]
    #   policy: none
    #   # Purge if bucket exists already
    #   purge: false
    #   # set versioning for
    #   # bucket [true|false]
    #   versioning: false # remove this key if you do not want versioning feature
    #   # set objectlocking for
    #   # bucket [true|false] NOTE: versioning is enabled by default if you use locking
    #   objectlocking: false
    # - name: bucket2
    #   policy: none
    #   purge: false
    #   versioning: true
    #   # set objectlocking for
    #   # bucket [true|false] NOTE: versioning is enabled by default if you use locking
    #   objectlocking: false

  environment:
    MINIO_IDENTITY_OPENID_ROLE_POLICY: consoleAdmin
  ## OpenID Identity Management
  ## The following section documents environment variables for enabling external identity management using an OpenID Connect (OIDC)-compatible provider.
  ## See https://min.io/docs/minio/linux/operations/external-iam/configure-openid-external-identity-management.html for a tutorial on using these variables.
  oidc:
    enabled: true
    configUrl: https://idm.grigri.cloud/oauth2/openid/minio/.well-known/openid-configuration
    existingClientSecretName: minio-oidc
    existingClientIdKey: clientId
    existingClientSecretKey: clientSecret
    scopes: openid,profile,email
    redirectUri: https://mc-s3.internal.grigri.cloud/oauth_callback
    displayName: idm.grigri.cloud

  metrics:
    serviceMonitor:
      enabled: true
      additionalLabels:
        release: monitoring
