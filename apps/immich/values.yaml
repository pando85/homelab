variables:
  env: &env
    DB_PORT: "5432"
    ENABLE_MAPBOX: "true"
    # "IMMICH_LOG_LEVEL" must be one of [verbose, debug, log, warn, error, fatal]
    IMMICH_LOG_LEVEL: log
    NODE_ENV: "production"
    REDIS_HOSTNAME: immich-redis
    REDIS_PORT: "6379"
    IMMICH_SERVER_URL: http://immich-server:3001
    IMMICH_MACHINE_LEARNING_ENABLED: "true"
    IMMICH_MACHINE_LEARNING_URL: http://immich-ml:3003
    A_REPLACE_DB_HOSTNAME: immich-postgres
    A_REPLACE_DB_DATABASE_NAME: immich
    A_REPLACE_DB_USERNAME:
      valueFrom:
        secretKeyRef:
          name: immich.immich-postgres.credentials.postgresql.acid.zalan.do
          key: username
    A_REPLACE_DB_PASSWORD:
      valueFrom:
        secretKeyRef:
          name: immich.immich-postgres.credentials.postgresql.acid.zalan.do
          key: password
    DB_URL: postgresql://$(A_REPLACE_DB_USERNAME):$(A_REPLACE_DB_PASSWORD)@$(A_REPLACE_DB_HOSTNAME):5432/$(A_REPLACE_DB_DATABASE_NAME)?sslmode=no-verify
    IMMICH_TELEMETRY_INCLUDE: all

app-template:
  controllers:
    server:
      strategy: RollingUpdate
      pod: &pod
        enableServiceLinks: false
        securityContext:
          runAsUser: 2000
          runAsGroup: 2000
          runAsNonRoot: true
          fsGroup: 2000
          fsGroupChangePolicy: OnRootMismatch
      containers:
        main:
          image: &image
            repository: ghcr.io/immich-app/immich-server
            tag: v2.1.0
          env:
            <<: *env
            IMMICH_WORKERS_INCLUDE: 'api'
            IMMICH_PORT: "3001"
          envFrom: &envFrom
            - secretRef:
                name: immich-secrets
          resources:
            requests:
              cpu: 10m
              memory: 128Mi
            limits:
              cpu: "2"
              memory: 2Gi
          probes: &probes
            liveness:
              enabled: true
            readiness:
              enabled: true
            startup:
              enabled: true
              spec:
                failureThreshold: 30
                periodSeconds: 5
    microservices:
      strategy: RollingUpdate
      pod:
        <<: *pod
        # runtimeClassName: nvidia
        # labels:
        #   pod-cleaner.dbcloud.org/watch: "true"
      containers:
        main:
          image: *image
          env:
            <<: *env
            TZ: Europe/Madrid
            NVIDIA_VISIBLE_DEVICES: all
            IMMICH_WORKERS_EXCLUDE: 'api'
          envFrom: *envFrom
          resources:
            requests:
              cpu: 10m
              memory: 128Mi
              # nvidia.com/gpu: "1"
            limits:
              cpu: "10"
              memory: 20Gi
              # nvidia.com/gpu: "1"
    ml:
      strategy: RollingUpdate
      pod:
        <<: *pod
        # runtimeClassName: nvidia
        # labels:
        #   pod-cleaner.dbcloud.org/watch: "true"
      containers:
        main:
          image:
            repository: ghcr.io/immich-app/immich-machine-learning
            # GPU use require cuda image. E.g.: v1.124.2-cuda
            tag: v2.1.0
          env:
            <<: *env
            NVIDIA_VISIBLE_DEVICES: all
            MPLCONFIGDIR: /.config/matplotlib
            TRANSFORMERS_CACHE: /cache
            # Guide to choose the model: https://github.com/immich-app/immich/discussions/11862
            MACHINE_LEARNING_PRELOAD__CLIP__TEXTUAL: "immich-app/nllb-clip-large-siglip__mrl"
            # MACHINE_LEARNING_PRELOAD__CLIP__VISUAL: "immich-app/ViT-H-14-quickgelu__dfn5b"
          envFrom: *envFrom
          resources:
            requests:
              cpu: 300m
              memory: 1Gi
              # nvidia.com/gpu: "1"
            limits:
              cpu: "4"
              memory: 10Gi
              # nvidia.com/gpu: "1"
          probes: *probes
    redis:
      containers:
        main:
          image:
            repository: public.ecr.aws/docker/library/redis
            tag: 8.2.2
          env:
            REDIS_REPLICATION_MODE: master
          command: ["redis-server"]
          probes: *probes

  service:
    server:
      controller: server
      ports:
        http:
          port: 3001
        metrics:
          port: 8081
    ml:
      controller: ml
      ports:
        http:
          port: 3003
    redis:
      controller: redis
      ports:
        http:
          port: 6379

  defaultPodOptions:
    nodeSelector:
      kubernetes.io/hostname: prusik

  ingress:
    immich:
      enabled: true
      className: nginx-internal
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod-dns
        external-dns.alpha.kubernetes.io/enabled: "true"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        # fix timeouts uploading big files disabling proxy buffering
        nginx.ingress.kubernetes.io/proxy-buffering: "off"
        nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
        nginx.ingress.kubernetes.io/proxy-body-size: 35G
      hosts:
        - host: &host photos.internal.grigri.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: server
                port: http
      tls:
        - hosts:
            - *host
          secretName: immich-tls-certificate
    external:
      enabled: true
      className: nginx-external
      annotations:
        external-dns.alpha.kubernetes.io/enabled: "true"
        external-dns.alpha.kubernetes.io/target: grigri.cloud
        cert-manager.io/cluster-issuer: letsencrypt-prod-dns
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-connect-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        # fix timeouts uploading big files disabling proxy buffering
        nginx.ingress.kubernetes.io/proxy-buffering: "off"
        nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
        nginx.ingress.kubernetes.io/proxy-body-size: 35G
      hosts:
        - host: &host photos.grigri.cloud
          paths:
            - path: /
              pathType: Prefix
              service:
                identifier: server
                port: http
      tls:
        - hosts:
            - *host
          secretName: immich-external-tls-certificate

  persistence:
    library:
      existingClaim: immich-data
      advancedMounts:
        server:
          main:
            - path: /usr/src/app/upload
        microservices:
          main:
            - path: /usr/src/app/upload
    transformers-cache:
      type: emptyDir
      advancedMounts:
        server:
          main:
            - path: /usr/src/app/.transformers_cache
        microservices:
          main:
            - path: /usr/src/app/.transformers_cache
    model-cache:
      existingClaim: immich-models
      advancedMounts:
        ml:
          main:
            - path: /cache
            - path: /.config

  serviceMonitor:
    server:
      enabled: true
      serviceName: immich-server
      labels:
        release: monitoring
      endpoints:
        - port: metrics
          scheme: http
          path: /metrics
          interval: 30s
          scrapeTimeout: 10s
